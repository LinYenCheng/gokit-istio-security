{{- if .Values.foo.enabled }}
{{- if eq (len $.Values.foo.versions) 0 }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.foo.name }}
spec:
  replicas: {{ .Values.foo.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.foo.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.foo.name }}
    spec:
      containers:
        - name: {{ .Values.foo.name }}
          env:
          {{- range $key, $value := .Values.foo.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          image: {{ $.Values.foo.image.repository }}:{{ $.Values.foo.image.tag }}
          resources:
{{ toYaml .Values.defaultResources | trim | indent 12 }}
{{- if $.Values.foo.imagePullSecretsName }}
      imagePullSecrets:
        - name: {{ $.Values.foo.imagePullSecretsName }}
{{- end }}
{{- else }}
{{- range $version, $imageTag := .Values.foo.versions }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.foo.name }}-{{ $version }}
spec:
  replicas: {{ $.Values.foo.replicas }}
  selector:
    matchLabels:
      app: {{ $.Values.foo.name }}
  template:
    metadata:
      labels:
        app: {{ $.Values.foo.name }}
        version: {{ $version | quote }}
    spec:
      containers:
        - name: {{ $.Values.foo.name }}
          env:
          {{- range $key, $value := $.Values.foo.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          image: {{ if $imageTag }}{{ $.Values.foo.image.repository }}:{{ $imageTag }}{{ else }}{{ $.Values.foo.image.repository }}:{{ $.Values.foo.image.tag }}{{ end }}
          resources:
{{ toYaml .Values.defaultResources | trim | indent 12 }}
{{- if $.Values.foo.imagePullSecretsName }}
      imagePullSecrets:
        - name: {{ $.Values.foo.imagePullSecretsName }}
{{- end }}
{{- end }}
{{- end }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.foo.name }}
spec:
  selector:
    app: {{ .Values.foo.name }}
  ports:
    - port: 80
      name: http
      targetPort: {{ .Values.foo.env.QS_HTTP_PORT }}
    - port: 8000
      name: grpc
      targetPort: {{ .Values.foo.env.QS_GRPC_PORT }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ .Values.foo.name }}
spec:
  hosts:
    - {{ .Values.foo.name }}
  http:
  {{- range $key, $value := .Values.foo.versions }}
    - match:
      - headers:
          version:
            exact: {{ $key }}
      route:
        - destination:
            host: {{ $.Values.foo.name }}
            subset: {{ $key }}
  {{- end }}
    - route:
        - destination:
            host: {{ .Values.foo.name }}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {{ .Values.foo.name }}
spec:
  host: {{ .Values.foo.name }}
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutiveErrors: 1
      interval: 1s
      baseEjectionTime: 3m
      maxEjectionPercent: 100
{{- if gt (len $.Values.foo.versions) 0 }}
  subsets:
  {{- range $key, $value := .Values.foo.versions }}
    - name: {{ $key }}
      labels:
        version: {{ $key }}
      trafficPolicy:
        loadBalancer:
          simple: ROUND_ROBIN
  {{- end }}
{{- end }}
{{- end }}
